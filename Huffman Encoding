#include<bits/stdc++.h>
using namespace std;
vector<string>resv;
struct TreeNode {
     char a;
      int val;
     TreeNode *left;
     TreeNode *right;
     TreeNode(int x,char a) : val(x), a(a), left(NULL), right(NULL) {}
};

struct comp{
    bool operator()(TreeNode*a,TreeNode*b){
        return a->val>b->val;
    }
};

void recurseit(TreeNode*root,string s){
    if(root==NULL)
    return ;
    
    if(root->left==NULL&&root->right==NULL){
           resv.push_back(s);
           recurseit(root->left,s);
           recurseit(root->right,s);
    }
    
    recurseit(root->left,s+'0');
    recurseit(root->right,s+'1');
}
int main(){
    
             int t;
             cin>>t;
             while(t--){
                 
                  string s;
                  cin>>s;      int n=s.size()    ;
                  
                  vector<int>freq(s.size());
                  for(int i=0;i<s.size();i++){
                      cin>>freq[i];
                  }
                  
                //   for(int i=0;i<s.size();i++){
                //       cout<<freq[i]<<" ";
                //   }
                //   cout<<endl;
                priority_queue<TreeNode,vector<TreeNode*>,comp>pq;
                
                for(int i=0;i<n;i++){
                    TreeNode*current=new TreeNode(freq[i],s[i]);
                    pq.push(current);
                }
                
                // for(int i=0;i<n;i++){
                //     TreeNode*current=pq.top();
                //     cout<<current->a<<"->"<<current->val<<" ";
                //     pq.pop();
                //     cout<<endl;
                // }
                // cout<<endl;
                // cout<<pq.size();
                                          TreeNode*root=NULL;
                                          
                while(pq.size()!=1){
                    
                    TreeNode*current1=pq.top();
                    pq.pop();
                    TreeNode*current2=pq.top();
                    pq.pop();  char fergi='z';
                    
                    TreeNode*newcurrent=new TreeNode(current1->val+current2->val,fergi);
                    newcurrent->left=current1;
                    newcurrent->right=current2;
                    pq.push(newcurrent);
                    
                    if(pq.size()==1){
                        TreeNode*top=pq.top();
                        root=top;
                    }
                    if(pq.size()==1)
                    break;
                 }
                 
                //  cout<<endl<<root->val<<endl;
                 
                 // here trackofroot is the root of the tree ! 
                                                                 string ans="";             
                 if(root==NULL)
                   cout<<0<<endl;
                 else{
                       recurseit(root,ans);
                 }
                  
                  for(int i=0;i<resv.size();i++){
                      cout<<resv[i]<<" ";
                  }
                  resv.clear();
                  cout<<endl;
             }
}
